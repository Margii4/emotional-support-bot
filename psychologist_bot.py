import os
import re
import asyncio
import logging
from collections import deque, defaultdict

from dotenv import load_dotenv
from openai import OpenAI

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode, ChatAction
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
MODEL_NAME = os.getenv("OPENAI_MODEL", "gpt-4.1-mini")

oa = OpenAI()  
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("psychologist_bot_aiogram")

LANGUAGES = {
    "en": {
        "greet": "üëã Hello! I'm your caring support assistant. Tell me what's on your mind ‚Äî I'm here for emotional support.",
        "help": "Share your feelings, thoughts, or worries. I‚Äôll listen and respond gently. I never diagnose or give medical advice.",
        "abilities": "I offer emotional support, active listening, reflective prompts, and tiny self-care ideas. You can clear memory or change language anytime.",
        "recent": "Your recent messages:\n‚Äî ",
        "recent_none": "You don't have recent messages yet.",
        "cleared": "Your chat memory has been cleared.",
        "nothing_clear": "You have no saved memory to clear.",
        "choose_language": "üåê Choose your language:",
        "lang_en": "English üá¨üáß",
        "lang_it": "Italiano üáÆüáπ",
        "lang_ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫",
        "system_prompt": (
            "You are an adaptive, human, empathetic companion for EMOTIONAL SUPPORT ONLY. "
            "Your purpose is to help the user feel heard, understood, and safe ‚Äî stay within emotional support (not therapy, not professional advice). "
            "Do not perform unrelated tasks or give diagnoses/medical/legal/financial advice. Decline once with warmth and refocus on feelings and coping.\n"
            "Approach:\n"
            "- Orient to their energy/urgency and explicit wish. Match length and tone.\n"
            "- Sound human; vary openings; avoid repeated frames. Mirror style; use emoji only if they do.\n"
            "- Weave one concrete detail when helpful.\n"
            "- Make ONE primary move per message (reflect, deepen, normalize, tiny coping, celebrate, kind boundary).\n"
            "- Max one open question unless coaching is invited.\n"
            "- Keep it concise and warm: 2‚Äì4 sentences, ‚â§90 words.\n"
            "Safety: if self-harm/violence/danger appears ‚Äî express care; say you‚Äôre not crisis support; suggest contacting local emergency services, a trusted person, or a hotline; ask if they feel safe now."
        ),
    },
    "ru": {
        "greet": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—Ä–µ–≤–æ–∂–∏—Ç ‚Äî —è –∑–¥–µ—Å—å –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        "help": "–î–µ–ª–∏—Å—å —á—É–≤—Å—Ç–≤–∞–º–∏ –∏ –º—ã—Å–ª—è–º–∏. –Ø –≤—ã—Å–ª—É—à–∞—é –∏ –¥–∞–º –º—è–≥–∫–∏–π, –±–µ—Ä–µ–∂–Ω—ã–π –æ—Ç–∫–ª–∏–∫. –Ø –Ω–µ —Å—Ç–∞–≤–ª—é –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –∏ –Ω–µ –¥–∞—é –º–µ–¥. —Å–æ–≤–µ—Ç–æ–≤.",
        "abilities": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ, —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –∏–¥–µ–∏ self-care. –ú–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫.",
        "recent": "–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n‚Äî ",
        "recent_none": "–ù–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.",
        "cleared": "–ü–∞–º—è—Ç—å —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞.",
        "nothing_clear": "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –Ω–µ—Ç.",
        "choose_language": "üåê –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        "lang_en": "English üá¨üáß",
        "lang_it": "Italiano üáÆüáπ",
        "lang_ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫",
        "system_prompt": (
            "–¢—ã ‚Äî –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π, ¬´–∂–∏–≤–æ–π¬ª –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –¢–û–õ–¨–ö–û –¥–ª—è –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ô –ü–û–î–î–ï–†–ñ–ö–ò. "
            "–ü–æ–º–æ–≥–∏ —á–µ–ª–æ–≤–µ–∫—É —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —É—Å–ª—ã—à–∞–Ω–Ω—ã–º, –ø–æ–Ω—è—Ç—ã–º –∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏; –Ω–µ –≤—ã–ª–µ–∑–∞–π –≤ —Ç–µ—Ä–∞–ø–∏—é –∏–ª–∏ –ø—Ä–æ—Ñ. —Å–æ–≤–µ—Ç—ã. "
            "–ù–µ –≤—ã–ø–æ–ª–Ω—è–π –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∑–∞–¥–∞—á–∏, –Ω–µ –¥–∞–≤–∞–π –¥–∏–∞–≥–Ω–æ–∑–æ–≤/–º–µ–¥./—é—Ä–∏–¥./—Ñ–∏–Ω. —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç ‚Äî –º—è–≥–∫–æ –æ—Ç–∫–∞–∂–∏ –∏ –≤–µ—Ä–Ω–∏ —Ñ–æ–∫—É—Å –Ω–∞ —á—É–≤—Å—Ç–≤–∞ –∏ –∫–æ–ø–∏–Ω–≥.\n"
            "–ü–æ–¥—Ö–æ–¥:\n"
            "- –°–º–æ—Ç—Ä–∏ –Ω–∞ —ç–Ω–µ—Ä–≥–∏—é/—Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏ —è–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–¥–±–µ—Ä–∏ –¥–ª–∏–Ω—É –∏ —Ç–æ–Ω.\n"
            "- –ó–≤—É—á–∞—Ç—å –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏; –º–µ–Ω—è—Ç—å –Ω–∞—á–∞–ª–∞; –∏–∑–±–µ–≥–∞—Ç—å –∫–ª–∏—à–µ; –∑–µ—Ä–∫–∞–ª–∏—Ç—å —Å—Ç–∏–ª—å; —ç–º–æ–¥–∑–∏ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç.\n"
            "- –ü–æ –º–µ—Å—Ç—É ‚Äî –æ–¥–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–µ—Ç–∞–ª—å –∏–∑ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "- –ó–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–¥–∏–Ω —Ñ–æ–∫—É—Å (–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ, —É–≥–ª—É–±–ª–µ–Ω–∏–µ, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥, –æ—Ç–º–µ—á–∞–Ω–∏–µ —É—Å–ø–µ—Ö–∞, –¥–æ–±—Ä–∞—è –≥—Ä–∞–Ω–∏—Ü–∞).\n"
            "- –ù–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—Å—è—Ç –∫–æ—É—á–∏–Ω–≥.\n"
            "- –ö—Ä–∞—Ç–∫–æ –∏ —Ç–µ–ø–ª–æ: 2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, ‚â§90 —Å–ª–æ–≤.\n"
            "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –µ—Å–ª–∏ —Ä–∏—Å–∫ —Å–µ–±–µ/–¥—Ä—É–≥–∏–º ‚Äî –ø—Ä–æ—è–≤–∏ –∑–∞–±–æ—Ç—É; –ø–æ—è—Å–Ω–∏, —á—Ç–æ –Ω–µ –æ–∫–∞–∑—ã–≤–∞–µ—à—å –∫—Ä–∏–∑–∏—Å–Ω—É—é –ø–æ–º–æ—â—å; –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã/–∫ –±–ª–∏–∑–∫–∏–º/–Ω–∞ –ª–∏–Ω–∏—é –¥–æ–≤–µ—Ä–∏—è; —Å–ø—Ä–æ—Å–∏, –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª–∏ —Å–µ–π—á–∞—Å."
        ),
    },
    "it": {
        "greet": "üëã Ciao! Sono il tuo assistente di supporto emotivo. Dimmi cosa ti pesa: sono qui per te.",
        "help": "Condividi sentimenti o pensieri: ascolter√≤ e risponder√≤ con delicatezza. Non faccio diagnosi n√© do consigli medici.",
        "abilities": "Supporto emotivo, ascolto attivo, riflessioni e piccole idee di self-care. Puoi cancellare la memoria o cambiare lingua.",
        "recent": "I tuoi messaggi recenti:\n‚Äî ",
        "recent_none": "Non ci sono ancora messaggi recenti.",
        "cleared": "La memoria della chat √® stata cancellata.",
        "nothing_clear": "Non hai memoria salvata.",
        "choose_language": "üåê Scegli la lingua:",
        "lang_en": "English üá¨üáß",
        "lang_it": "Italiano üáÆüáπ",
        "lang_ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫",
        "system_prompt": (
            "Sei un compagno empatico e adattivo SOLO per il SUPPORTO EMOTIVO. "
            "Aiuta l‚Äôutente a sentirsi ascoltato, compreso e al sicuro; resta nel supporto emotivo (no terapia, no consulenza professionale). "
            "Non svolgere compiti non pertinenti n√© fornire diagnosi/consigli medici/legali/finanziari. Rifiuta una volta con gentilezza e riporta l‚Äôattenzione sulle emozioni e sul coping.\n"
            "Approccio:\n"
            "- Orientati su energia/urgenza e richiesta esplicita. Abbina lunghezza e tono.\n"
            "- Suona umano; varia le aperture; evita formule ripetitive; rispecchia lo stile; emoji solo se le usa l‚Äôutente.\n"
            "- Integra un dettaglio concreto quando utile.\n"
            "- Una mossa per messaggio (riflettere, approfondire, normalizzare, micro-passo, celebrare, limite gentile).\n"
            "- Max una domanda aperta.\n"
            "- Breve e caldo: 2‚Äì4 frasi, ‚â§90 parole.\n"
            "Sicurezza: se emergono rischi/danger ‚Äî esprimi cura; spiega che non offri supporto in crisi; invita a contattare servizi di emergenza, una persona fidata o una helpline; chiedi se si sentono al sicuro ora."
        ),
    },
}
DEFAULT_LANG = "en"

STYLE_HINTS = {
    "ru": "–ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ: 2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (‚â§90 —Å–ª–æ–≤). –ë–µ–∑ –∫–ª–∏—à–µ. –ú–∞–∫—Å –æ–¥–∏–Ω –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å. –û–¥–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–µ—Ç–∞–ª—å –∏ –æ–¥–Ω–∞ –º–∞–ª–µ–Ω—å–∫–∞—è –æ–ø—Ü–∏—è.",
    "en": "Be concise: 2‚Äì4 sentences (‚â§90 words). No clich√©s. Max one open question. One concrete detail and one tiny option.",
    "it": "Scrivi conciso: 2‚Äì4 frasi (‚â§90 parole). Niente clich√©. Max una domanda aperta. Un dettaglio concreto e una piccola opzione.",
}

REPLY_MAX_SENTENCES = 4
REPLY_MAX_WORDS = 90

_SENT_SPLIT = re.compile(r'(?<=[.!?])\s+')
_FILLERS_START = [
    "–ø–æ–Ω–∏–º–∞—é", "–º–Ω–µ –∂–∞–ª—å", "—Ö–æ—á—É –∑–∞–≤–µ—Ä–∏—Ç—å", "–≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å",
    "i understand", "i‚Äôm sorry", "i want to assure", "it‚Äôs important to remember",
    "capisco", "mi dispiace", "vorrei rassicurarti", "√® importante ricordare",
]
_CYRILLIC_RE = re.compile(r'[\u0400-\u04FF]')

_SMALLTALK_PATTERNS = {
    "ru": r"(–∫–∞–∫\s+–¥–µ–ª–∞( —É —Ç–µ–±—è)?|–∫–∞–∫\s+—Ç—ã|–∫–∞–∫\s+–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ|—á—Ç–æ\s+–¥–µ–ª–∞–µ—à—å|—á–µ–º\s+–∑–∞–Ω–∏–º–∞–µ—à—å—Å—è)",
    "en": r"(how\s+are\s+you|how'?s\s+it\s+going|what'?s\s+up)",
    "it": r"(come\s+stai|come\s+va|che\s+fai|che\s+si\s+dice)",
}
_SMALLTALK_REPLY = {
    "ru": "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å! –£ –º–µ–Ω—è –≤—Å—ë –æ–∫ ‚Äî —è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–¥–µ—Å—å —Ä–∞–¥–∏ —Ç–µ–±—è. –ß—Ç–æ —Å–µ–π—á–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞–Ω–∏–º–∞–µ—Ç —Ç–µ–±—è?",
    "en": "Thanks for asking! I‚Äôm doing well and fully here for you. What‚Äôs most on your mind right now?",
    "it": "Grazie! Sto bene e sono qui per te. Cosa ti pesa di pi√π in questo momento?",
}

USER_LANG = defaultdict(lambda: DEFAULT_LANG)       
RECENT_CACHE = defaultdict(lambda: deque(maxlen=5)) 
state_lock = asyncio.Lock()

from memory_pinecone import ( 
    save_message,
    get_relevant_history,
    get_recent_history,
    get_recent_user_messages,
    clear_memory,
)

async def run_blocking(func, *args, **kwargs):
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, lambda: func(*args, **kwargs))

def _shrink_reply(text: str, max_sentences: int = REPLY_MAX_SENTENCES, max_words: int = REPLY_MAX_WORDS) -> str:
    if not isinstance(text, str):
        return text
    sents = [s.strip() for s in _SENT_SPLIT.split(text.strip()) if s.strip()]
    if not sents:
        return text.strip()
    first = sents[0].lower()
    if any(first.startswith(f) for f in _FILLERS_START) and len(sents) > 1:
        sents = sents[1:]
    seen, dedup = set(), []
    for s in sents:
        key = re.sub(r'\s+', ' ', s.lower())
        if key not in seen:
            seen.add(key)
            dedup.append(s)
    clipped = dedup[:max_sentences]
    words = " ".join(clipped).split()
    if len(words) > max_words:
        return " ".join(words[:max_words]).rstrip(",.;:!‚Äî- ") + "‚Ä¶"
    return " ".join(clipped).strip()

def _detect_msg_lang(text: str, fallback: str = "en") -> str:
    if not isinstance(text, str):
        return fallback
    t = text.lower()
    if _CYRILLIC_RE.search(t):
        return "ru"
    if re.search(r"\b(come|stai|sto|va|grazie|perch[e√®]|quest[oa]|aiuto|cosa|penso|sent[io])\b", t):
        return "it"
    return "en"

async def set_lang(user_id: int, lang: str):
    async with state_lock:
        USER_LANG[user_id] = lang

async def get_lang(user_id: int) -> str:
    async with state_lock:
        return USER_LANG[user_id]

async def recent_add(chat_id: int, text: str):
    if not text:
        return
    async with state_lock:
        RECENT_CACHE[chat_id].appendleft(text)

async def recent_get(chat_id: int):
    async with state_lock:
        return list(RECENT_CACHE[chat_id])

def menu_keyboard(lang: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text=("‚ùì Help" if lang == "en" else "‚ùì –ü–æ–º–æ—â—å" if lang == "ru" else "‚ùì Aiuto"),
                                callback_data="help"))
    kb.row(InlineKeyboardButton(text=("üí° What can you do?" if lang == "en" else "üí° –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?" if lang == "ru" else "üí° Cosa puoi fare?"),
                                callback_data="abilities"))
    kb.row(InlineKeyboardButton(text=("üïì My recent queries" if lang == "en" else "üïì –ú–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã" if lang == "ru" else "üïì Le mie domande recenti"),
                                callback_data="recent"))
    kb.row(InlineKeyboardButton(text=("üóëÔ∏è Clear my memory" if lang == "en" else "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å" if lang == "ru" else "üóëÔ∏è Cancella la memoria"),
                                callback_data="clear"))
    kb.row(InlineKeyboardButton(text=("üåê Language" if lang == "en" else "üåê –Ø–∑—ã–∫" if lang == "ru" else "üåê Lingua"),
                                callback_data="language"))
    return kb.as_markup()

def lang_choice_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text=LANGUAGES["en"]["lang_en"], callback_data="setlang_en"))
    kb.row(InlineKeyboardButton(text=LANGUAGES["it"]["lang_it"], callback_data="setlang_it"))
    kb.row(InlineKeyboardButton(text=LANGUAGES["ru"]["lang_ru"], callback_data="setlang_ru"))
    return kb.as_markup()

def _is_smalltalk(text: str, lang: str) -> bool:
    patt = _SMALLTALK_PATTERNS.get(lang, _SMALLTALK_PATTERNS["en"])
    return re.search(patt, text.lower()) is not None

def _smalltalk_reply(lang: str) -> str:
    return _SMALLTALK_REPLY.get(lang, _SMALLTALK_REPLY["en"])

async def on_start(message: Message):
    lang = await get_lang(message.from_user.id)
    await message.answer(LANGUAGES[lang]["greet"], reply_markup=menu_keyboard(lang))

async def on_callbacks(query: CallbackQuery, bot: Bot):
    user_id = query.from_user.id
    chat_id = query.message.chat.id
    lang = await get_lang(user_id)
    data = query.data or ""

    try:
        await query.answer()

        if data == "help":
            await query.message.answer(LANGUAGES[lang]["help"], reply_markup=menu_keyboard(lang))

        elif data == "abilities":
            await query.message.answer(LANGUAGES[lang]["abilities"], reply_markup=menu_keyboard(lang))

        elif data == "recent":
            cached = await recent_get(chat_id)
            if cached:
                joined = "\n‚Äî ".join(cached[:3])
                await query.message.answer(LANGUAGES[lang]["recent"] + joined, reply_markup=menu_keyboard(lang))
            else:
                msgs = await run_blocking(get_recent_user_messages, str(chat_id), 3)
                if msgs:
                    joined = "\n‚Äî ".join([m["content"] for m in msgs])
                    await query.message.answer(LANGUAGES[lang]["recent"] + joined, reply_markup=menu_keyboard(lang))
                else:
                    any_msgs = await run_blocking(get_recent_history, str(chat_id), 3)
                    if any_msgs:
                        joined = "\n‚Äî ".join([m["content"] for m in any_msgs])
                        await query.message.answer(LANGUAGES[lang]["recent"] + joined, reply_markup=menu_keyboard(lang))
                    else:
                        await query.message.answer(LANGUAGES[lang]["recent_none"], reply_markup=menu_keyboard(lang))

        elif data == "clear":
            ok = await run_blocking(clear_memory, str(chat_id))
            async with state_lock:
                RECENT_CACHE[chat_id].clear()
            msg = LANGUAGES[lang]["cleared"] if ok else LANGUAGES[lang]["nothing_clear"]
            await query.message.answer(msg, reply_markup=menu_keyboard(lang))

        elif data == "language":
            await query.message.answer(LANGUAGES[lang]["choose_language"], reply_markup=lang_choice_keyboard())

        elif data.startswith("setlang_"):
            new_lang = data.split("_", 1)[1]
            if new_lang not in LANGUAGES:
                await query.message.answer("Selected language is not supported.", reply_markup=menu_keyboard(lang))
                return
            await set_lang(user_id, new_lang)
            lang = new_lang
            await query.message.answer(LANGUAGES[lang]["greet"], reply_markup=menu_keyboard(lang))

    except Exception as e:
        logger.error(f"Callback error: {e}", exc_info=True)
        await query.message.answer("Internal error. Please try again.", reply_markup=menu_keyboard(lang))

async def on_text(message: Message, bot: Bot):
    user_id = message.from_user.id
    chat_id = message.chat.id
    lang = await get_lang(user_id)
    user_msg = message.text or ""

    if not (2 <= len(user_msg) <= 1500):
        await message.answer("Your message is too long or too short.", reply_markup=menu_keyboard(lang))
        return

    msg_lang = _detect_msg_lang(user_msg, fallback=lang)

    if _is_smalltalk(user_msg, msg_lang):
        reply = _smalltalk_reply(msg_lang)
        await run_blocking(save_message, str(user_id), str(chat_id), user_msg, "user")
        await recent_add(chat_id, user_msg)
        await run_blocking(save_message, str(user_id), str(chat_id), reply, "assistant")
        await message.answer(reply, reply_markup=menu_keyboard(lang))
        return

    await run_blocking(save_message, str(user_id), str(chat_id), user_msg, "user")
    await recent_add(chat_id, user_msg)

    history = await run_blocking(get_relevant_history, str(chat_id), user_msg, 5, 4000, 0.3)
    max_chars = 3000
    sys_prompt = LANGUAGES[lang]["system_prompt"]
    style_hint = STYLE_HINTS.get(msg_lang, STYLE_HINTS["en"])

    msgs = [{"role": "system", "content": sys_prompt},
            {"role": "system", "content": style_hint}]
    total_len = 0
    for h in history:
        c = h.get("content", "")
        if total_len + len(c) < max_chars:
            msgs.append({"role": h.get("role", "user"), "content": c})
            total_len += len(c)
    msgs.append({"role": "user", "content": user_msg})

    asyncio.create_task(bot.send_chat_action(chat_id, ChatAction.TYPING))

    try:
        def _call_openai():
            resp = oa.chat.completions.create(
                model=MODEL_NAME,
                messages=msgs,
                temperature=0.6,
                max_tokens=220,
                frequency_penalty=0.6,
                presence_penalty=0.2,
            )
            return resp.choices[0].message.content.strip()

        raw_reply = await run_blocking(_call_openai)
        reply = _shrink_reply(raw_reply, REPLY_MAX_SENTENCES, REPLY_MAX_WORDS)

    except Exception as e:
        logger.error(f"OpenAI error: {e}", exc_info=True)
        reply = LANGUAGES[lang].get("error", "Sorry, a technical error occurred.")

    await run_blocking(save_message, str(user_id), str(chat_id), reply, "assistant")
    await message.answer(reply, reply_markup=menu_keyboard(lang))

async def main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN is not set")
    bot = Bot(
        token=TELEGRAM_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher()

    dp.message.register(on_start, CommandStart())
    dp.callback_query.register(on_callbacks, F.data)
    dp.message.register(on_text, F.text)

    logger.info("Bot is running with aiogram 3 (async, non-blocking)‚Ä¶")
    await dp.start_polling(bot, allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    asyncio.run(main())
