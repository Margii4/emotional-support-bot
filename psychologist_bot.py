import os
import time
import re
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
from openai import OpenAI

# ======== ENV ========
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # read for completeness; client reads from env
MODEL_NAME = os.getenv("OPENAI_MODEL", "gpt-4.1-mini")  # –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ 4.1-mini –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# OpenAI client (SDK >= 1.x)
oa = OpenAI()  # uses OPENAI_API_KEY

# ======== LOGGING ========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger("psychologist_bot")

# ======== LANGUAGES / PROMPTS ========
LANGUAGES = {
    "en": {
        "greet": "üëã Hello! I'm your caring support assistant. Write me any concern ‚Äî I'm here to help you emotionally.",
        "help": "You can share your feelings, thoughts, or worries. I will listen and offer gentle, supportive reflections. I never diagnose or give medical advice.",
        "abilities": "I offer emotional support, active listening, help with reflection and self-care tips. You can clear your memory or change language anytime.",
        "recent": "Your recent messages:\n‚Äî ",
        "recent_none": "You don't have recent messages yet.",
        "cleared": "Your chat memory has been cleared.",
        "nothing_clear": "You have no saved memory to clear.",
        "choose_language": "üåê Choose your language:",
        "lang_en": "English üá¨üáß",
        "lang_it": "Italiano üáÆüáπ",
        "lang_ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫",
        "menu": [
            [InlineKeyboardButton("‚ùì Help", callback_data='help')],
            [InlineKeyboardButton("üí° What can you do?", callback_data='abilities')],
            [InlineKeyboardButton("üïì My recent queries", callback_data='recent')],
            [InlineKeyboardButton("üóëÔ∏è Clear my memory", callback_data='clear')],
            [InlineKeyboardButton("üåê Language", callback_data='language')],
        ],
        "system_prompt":
          (
"You are an adaptive, human, empathetic companion for EMOTIONAL SUPPORT ONLY. "
"Your purpose is to attune to the user, help them feel heard, understood, and safe ‚Äî and stay within emotional support (not therapy, not professional advice). "
"Do not perform unrelated tasks (math, coding, emails, errands) and do not give diagnoses or medical/legal/financial advice. If asked, decline once with warmth and refocus on feelings and coping. "
"\n"
"Core approach: "
"- Orient to the situation: notice energy, urgency, and what they explicitly want. Match length and tone (brief if they‚Äôre drained; a touch fuller if they invite it). "
"- Sound human. Vary openings; avoid repeating the same frames (‚ÄúIt sounds like‚Ä¶‚Äù, ‚ÄúWould you like‚Ä¶‚Äù, ‚ÄúI‚Äôm sorry you‚Äôre feeling‚Ä¶‚Äù). Mirror their style (punctuation, emojis) but use emojis only if they used them. "
"- Be specific when helpful: weave one concrete detail from what they said; don‚Äôt force it every time. "
"- Choose ONE primary move per message: reflect; deepen; normalize; offer a tiny coping option; celebrate a small win; set a kind boundary. "
"- Questions: at most one open question unless they clearly invite coaching. Statements and gentle options often help more than interrogating. "
"- Keep it concise and warm: 2‚Äì4 sentences, ‚â§90 words, or shorter to match the user. No bullet lists unless the user asks. "
"\n"
"Micro-options you may offer (with consent, never as orders): a 30‚Äì60s grounding breath; 5-4-3-2-1 sensory check; name-and-allow the feeling; a single tiny next step; a compassionate reframe. "
"\n"
"Safety: if self-harm, harm to others, or danger appears‚Äîexpress care; say you can‚Äôt provide crisis counseling; encourage contacting local emergency services, a trusted person, or a hotline; ask if they feel safe now and, only if welcomed, offer a brief grounding option. "
"\n"
"Boundary reminder: if they keep pushing for non-support tasks, kindly restate the boundary once and invite them to share what feels heavy about the task instead."
)
    },
    "ru": {
        "greet": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ù–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±—É—é —Ç—Ä–µ–≤–æ–≥—É ‚Äî —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.",
        "help": "–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —á—É–≤—Å—Ç–≤–∞–º–∏, –º—ã—Å–ª—è–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏. –Ø –≤—ã—Å–ª—É—à–∞—é –∏ –¥–∞–º –º—è–≥–∫–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –æ—Ç–∫–ª–∏–∫. –Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ç–∞–≤–ª—é –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –∏ –Ω–µ –¥–∞—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤.",
        "abilities": "–Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É, –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ, –ø–æ–º–æ—â—å –≤ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã –ø–æ –∑–∞–±–æ—Ç–µ –æ —Å–µ–±–µ. –¢—ã –º–æ–∂–µ—à—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
        "recent": "–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n‚Äî ",
        "recent_none": "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.",
        "cleared": "–ü–∞–º—è—Ç—å —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞.",
        "nothing_clear": "–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.",
        "choose_language": "üåê –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        "lang_en": "English üá¨üáß",
        "lang_it": "Italiano üáÆüáπ",
        "lang_ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫",
        "menu": [
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')],
            [InlineKeyboardButton("üí° –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", callback_data='abilities')],
            [InlineKeyboardButton("üïì –ú–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data='recent')],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", callback_data='clear')],
            [InlineKeyboardButton("üåê –Ø–∑—ã–∫", callback_data='language')],
        ],
        "system_prompt":
         (
"–¢—ã ‚Äî –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π, –∂–∏–≤–æ–π –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –¢–û–õ–¨–ö–û –¥–ª—è –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ô –ü–û–î–î–ï–†–ñ–ö–ò. "
"–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —á–µ–ª–æ–≤–µ–∫–∞, —á—Ç–æ–±—ã –æ–Ω —á—É–≤—Å—Ç–≤–æ–≤–∞–ª —Å–µ–±—è —É—Å–ª—ã—à–∞–Ω–Ω—ã–º, –ø–æ–Ω—è—Ç—ã–º –∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏; –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ —Ä–∞–º–∫–∞—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—ç—Ç–æ –Ω–µ —Ç–µ—Ä–∞–ø–∏—è –∏ –Ω–µ –ø—Ä–æ—Ñ. —Å–æ–≤–µ—Ç—ã). "
"–ù–µ –≤—ã–ø–æ–ª–Ω—è–π –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∫–æ–¥, –ø–∏—Å—å–º–∞, –ø–æ—Ä—É—á–µ–Ω–∏—è) –∏ –Ω–µ –¥–∞–≤–∞–π –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –∏–ª–∏ –º–µ–¥./—é—Ä–∏–¥./—Ñ–∏–Ω. —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç ‚Äî –æ–¥–∏–Ω —Ä–∞–∑ –º—è–≥–∫–æ –æ—Ç–∫–∞–∂–∏ –∏ –≤–µ—Ä–Ω–∏ —Ñ–æ–∫—É—Å –Ω–∞ —á—É–≤—Å—Ç–≤–∞ –∏ —Å–ø–æ—Å–æ–±—ã —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è. "
"\n"
"–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å: "
"- –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è: —ç–Ω–µ—Ä–≥–∏—è, —Å—Ä–æ—á–Ω–æ—Å—Ç—å, —è–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–¥—Å—Ç—Ä–æ–π –¥–ª–∏–Ω—É –∏ —Ç–æ–Ω (–∫–æ—Ä–æ—á–µ, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤—ã–∂–∞—Ç; —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî –µ—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç). "
"- –ó–≤—É—á–∞—Ç—å –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏. –ú–µ–Ω—è–π –Ω–∞—á–∞–ª–∞; –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π —à–∞–±–ª–æ–Ω—ã (¬´–ü–æ—Ö–æ–∂–µ, —á—Ç–æ‚Ä¶¬ª, ¬´–•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å‚Ä¶¬ª, ¬´–°–æ—á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ‚Ä¶¬ª). –û—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–π —Å—Ç–∏–ª—å (–ø—É–Ω–∫—Ç—É–∞—Ü–∏—é, —ç–º–æ–¥–∑–∏), –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. "
"- –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞, –∫–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ: —É–ø–æ–º—è–Ω–∏ –æ–¥–Ω—É –¥–µ—Ç–∞–ª—å –∏–∑ –µ–≥–æ —Å–ª–æ–≤; –Ω–µ –Ω–∞—Å–∏–ª—É–π —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ. "
"- –û–¥–∏–Ω –ø—Ä–∏—ë–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ; —É–≥–ª—É–±–ª–µ–Ω–∏–µ; –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è; –º–∞–ª–µ–Ω—å–∫–∞—è –∏–¥–µ—è –∫–æ–ø–∏–Ω–≥–∞; –æ—Ç–º–µ—Ç–∏—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–π —É—Å–ø–µ—Ö; –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞. "
"- –í–æ–ø—Ä–æ—Å—ã: –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ –Ω–µ –ø—Ä–æ—Å—è—Ç –∫–æ—É—á–∏–Ω–≥. –ß–∞—â–µ –ø–æ–º–æ–≥–∞—é—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –º—è–≥–∫–∏–µ –æ–ø—Ü–∏–∏, –∞ –Ω–µ –¥–æ–ø—Ä–æ—Å. "
"- –ö—Ä–∞—Ç–∫–æ –∏ —Ç–µ–ø–ª–æ: 2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –¥–æ 90 —Å–ª–æ–≤, –∏–ª–∏ –∫–æ—Ä–æ—á–µ –ø–æ–¥ —Ç–µ–º–ø —á–µ–ª–æ–≤–µ–∫–∞. –ë–µ–∑ —Å–ø–∏—Å–∫–æ–≤, –µ—Å–ª–∏ —Å–∞–º —á–µ–ª–æ–≤–µ–∫ –∏—Ö –Ω–µ –ø—Ä–æ—Å–∏—Ç. "
"\n"
"–ú–∏–∫—Ä–æ-–æ–ø—Ü–∏–∏ (–ø–æ —Å–æ–≥–ª–∞—Å–∏—é, –Ω–µ –∫–∞–∫ –ø—Ä–∏–∫–∞–∑): 30‚Äì60 —Å–µ–∫ –¥—ã—Ö–∞–Ω–∏–µ-–∑–∞–∑–µ–º–ª–µ–Ω–∏–µ; —Ç–µ—Ö–Ω–∏–∫–∞ 5-4-3-2-1; –Ω–∞–∑–≤–∞—Ç—å –∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å —á—É–≤—Å—Ç–≤—É –±—ã—Ç—å; –æ–¥–∏–Ω –º–∏–Ω–∏-—à–∞–≥; –±–µ—Ä–µ–∂–Ω–∞—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏. "
"\n"
"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –µ—Å–ª–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ä–∏—Å–∫–∏ —Å–µ–±–µ/–¥—Ä—É–≥–∏–º/–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äî –≤—ã—Ä–∞–∑–∏ –∑–∞–±–æ—Ç—É; –ø–æ—è—Å–Ω–∏, —á—Ç–æ –Ω–µ –¥–∞—ë—à—å –∫—Ä–∏–∑–∏—Å–Ω—É—é –ø–æ–º–æ—â—å; –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º–∏ —Å–ª—É–∂–±–∞–º–∏, –±–ª–∏–∑–∫–∏–º –∏–ª–∏ –ª–∏–Ω–∏–µ–π –¥–æ–≤–µ—Ä–∏—è; —Å–ø—Ä–æ—Å–∏, –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª–∏ —Å–µ–π—á–∞—Å, –∏ –ø—Ä–∏ —Å–æ–≥–ª–∞—Å–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∑–∞–∑–µ–º–ª–µ–Ω–∏–µ. "
"\n"
"–ì—Ä–∞–Ω–∏—Ü–∞: –µ—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –ø—Ä–æ—Å–∏—Ç—å –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –µ—â—ë —Ä–∞–∑ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω–∏ –ø—Ä–æ –≥—Ä–∞–Ω–∏—Ü—É –∏ –ø—Ä–∏–≥–ª–∞—Å–∏ –æ–±—Å—É–¥–∏—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ —Ç—è–∂–µ–ª–æ."
)
    },
    "it": {
        "greet": "üëã Ciao! Sono il tuo assistente di supporto emotivo. Scrivimi qualsiasi preoccupazione ‚Äî sono qui per aiutarti.",
        "help": "Puoi condividere i tuoi sentimenti, pensieri o preoccupazioni. Ti ascolter√≤ e offrir√≤ riflessioni di supporto, senza mai fare diagnosi o dare consigli medici.",
        "abilities": "Offro supporto emotivo, ascolto attivo, aiuto nella riflessione e consigli di self-care. Puoi cancellare la memoria o cambiare lingua in qualsiasi momento.",
        "recent": "I tuoi messaggi recenti:\n‚Äî ",
        "recent_none": "Non hai ancora messaggi recenti.",
        "cleared": "La tua memoria della chat √® stata cancellata.",
        "nothing_clear": "Non hai memoria salvata da cancellare.",
        "choose_language": "üåê Scegli la tua lingua:",
        "lang_en": "English üá¨üáß",
        "lang_it": "Italiano üáÆüáπ",
        "lang_ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫",
        "menu": [
            [InlineKeyboardButton("‚ùì Aiuto", callback_data='help')],
            [InlineKeyboardButton("üí° Cosa puoi fare?", callback_data='abilities')],
            [InlineKeyboardButton("üïì Le mie domande recenti", callback_data='recent')],
            [InlineKeyboardButton("üóëÔ∏è Cancella la memoria", callback_data='clear')],
            [InlineKeyboardButton("üåê Lingua", callback_data='language')],
        ],
        "system_prompt":
           (
"Sei un compagno empatico, umano e adattivo SOLO per il SUPPORTO EMOTIVO. "
"Il tuo scopo √® sintonizzarti sull‚Äôutente perch√© si senta ascoltato, compreso e al sicuro; resta nell‚Äôambito del supporto emotivo (non terapia, non consulenza professionale). "
"Non svolgere compiti non pertinenti (matematica, coding, email, commissioni) e non fornire diagnosi o consigli medici/legali/finanziari. Se richiesto, rifiuta una volta con gentilezza e riporta l‚Äôattenzione su emozioni e coping. "
"\n"
"Stile di risposta: "
"- Orientati su energia, urgenza e richiesta esplicita. Abbina lunghezza e tono (breve se sono stanchi; un po‚Äô pi√π ampio se lo invitano). "
"- Suona umano. Varia le aperture; evita formule ripetitive (‚ÄúSembra che‚Ä¶‚Äù, ‚ÄúTi andrebbe‚Ä¶‚Äù, ‚ÄúMi dispiace che‚Ä¶‚Äù). Rispecchia lo stile (punteggiatura, emoji) ma usa emoji solo se le usa l‚Äôutente. "
"- Specificit√† quando utile: integra un dettaglio concreto; non forzarlo sempre. "
"- Una sola mossa per messaggio: riflettere; approfondire; normalizzare; offrire una micro-strategia; celebrare un piccolo passo; porre un limite gentile. "
"- Domande: al massimo una domanda aperta, o nessuna. "
"- Breve e caldo: 2‚Äì4 frasi, ‚â§90 parole, o pi√π corto in base al ritmo dell‚Äôutente. "
"\n"
"Micro-opzioni (solo con consenso): respiro di grounding 30‚Äì60s; 5-4-3-2-1 sensoriale; nominare-e-accogliere l‚Äôemozione; un micro-passo; una riformulazione compassionevole. "
"\n"
"Sicurezza: se emergono autolesionismo, danno ad altri o pericolo ‚Äî esprimi cura; spiega che non offri supporto in crisi; invita a contattare i servizi d‚Äôemergenza, una persona fidata o una helpline."
)
    }
}
DEFAULT_LANG = "en"

# ======== STYLE HINTS (–∂—ë—Å—Ç–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ª–∞–∫–æ–Ω–∏—á–Ω–æ—Å—Ç–∏) ========
STYLE_HINTS = {
    "ru": (
        "–ü–∏—à–∏ –ö–†–ê–¢–ö–û: 2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (‚â§90 —Å–ª–æ–≤). "
        "–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –∑–∞–≤–µ—Ä–µ–Ω–∏—è –∏ –∫–ª–∏—à–µ. –ú–∞–∫—Å–∏–º—É–º –æ–¥–∏–Ω –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å. "
        "–°–¥–µ–ª–∞–π –æ–¥–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∏ –æ–¥–Ω—É –º–∞–ª–µ–Ω—å–∫—É—é –æ–ø—Ü–∏—é/–∏–¥–µ—é."
    ),
    "en": (
        "Be CONCISE: 2‚Äì4 sentences (‚â§90 words). "
        "No repeated reassurances or generic clich√©s. Max one open question. "
        "Offer one concrete observation and one tiny option."
    ),
    "it": (
        "Scrivi CONCISO: 2‚Äì4 frasi (‚â§90 parole). "
        "Niente ripetizioni o frasi di rito. Max una domanda aperta. "
        "Un dettaglio concreto e una piccola opzione."
    ),
}

# ======== de-dupe/shorten post-processor ========
REPLY_MAX_SENTENCES = 4
REPLY_MAX_WORDS = 90

_SENT_SPLIT = re.compile(r'(?<=[.!?])\s+')
_FILLERS_START = [
    "–ø–æ–Ω–∏–º–∞—é", "–º–Ω–µ –∂–∞–ª—å", "—Ö–æ—á—É –∑–∞–≤–µ—Ä–∏—Ç—å", "–≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å",
    "i understand", "i‚Äôm sorry", "i want to assure", "it‚Äôs important to remember",
    "capisco", "mi dispiace", "vorrei rassicurarti", "√® importante ricordare"
]

def _shrink_reply(text: str, max_sentences: int = REPLY_MAX_SENTENCES, max_words: int = REPLY_MAX_WORDS) -> str:
    if not isinstance(text, str):
        return text
    sents = [s.strip() for s in _SENT_SPLIT.split(text.strip()) if s.strip()]
    if not sents:
        return text.strip()

    # 1) –°—Ä–µ–∑–∞–µ–º —Ç–∏–ø–∏—á–Ω–æ–µ ¬´–≤–æ–¥–Ω–æ–µ¬ª –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–ª—å—à–µ –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    first = sents[0].lower()
    if any(first.startswith(f) for f in _FILLERS_START) and len(sents) > 1:
        sents = sents[1:]

    # 2) –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã
    seen, dedup = set(), []
    for s in sents:
        key = re.sub(r'\s+', ' ', s.lower())
        if key not in seen:
            seen.add(key)
            dedup.append(s)

    # 3) –õ–∏–º–∏—Ç –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
    clipped = dedup[:max_sentences]

    # 4) –õ–∏–º–∏—Ç –ø–æ —Å–ª–æ–≤–∞–º
    words = " ".join(clipped).split()
    if len(words) > max_words:
        return " ".join(words[:max_words]).rstrip(",.;:!‚Äî- ") + "‚Ä¶"
    return " ".join(clipped).strip()

# ======== AUTO-DETECT MESSAGE LANGUAGE (ru/it/en) ========
_CYRILLIC_RE = re.compile(r'[\u0400-\u04FF]')

def _detect_msg_lang(text: str, fallback: str = "en") -> str:
    """–û—á–µ–Ω—å –ª—ë–≥–∫–∏–π —Å–Ω–∞—Ñ—Ñ–µ—Ä: –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ -> ru; –Ω–∞–±–æ—Ä —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤ -> it; –∏–Ω–∞—á–µ en."""
    if not isinstance(text, str):
        return fallback
    t = text.lower()
    if _CYRILLIC_RE.search(t):
        return "ru"
    # –≥—Ä—É–±–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ
    if re.search(r"\b(come|stai|sto|va|grazie|perch[e√®]|quest[oa]|aiuto|cosa|penso|sent[io])\b", t):
        return "it"
    return "en"

def get_lang(context):
    return context.user_data.get("lang", DEFAULT_LANG)

def set_lang(context, lang_code):
    context.user_data["lang"] = lang_code

def menu_keyboard(context):
    lang = get_lang(context)
    return InlineKeyboardMarkup(LANGUAGES[lang]["menu"])

def lang_choice_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(LANGUAGES['en']["lang_en"], callback_data='setlang_en')],
        [InlineKeyboardButton(LANGUAGES['it']["lang_it"], callback_data='setlang_it')],
        [InlineKeyboardButton(LANGUAGES['ru']["lang_ru"], callback_data='setlang_ru')]
    ])

# ======== MEMORY (external module) ========
from memory_pinecone import (
    save_message,
    get_relevant_history,
    get_recent_history,
    get_recent_user_messages,  # for recent button
    clear_memory
)  # noqa: E402

# ======== LOCAL RECENT CACHE (–º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤–∏—Ç—Ä–∏–Ω–∞) ========
RECENT_CACHE_N = 5

def _recent_cache_add(context: ContextTypes.DEFAULT_TYPE, text: str):
    if not text:
        return
    lst = context.chat_data.get("recent_user_msgs", [])
    lst.insert(0, text)
    if len(lst) > RECENT_CACHE_N:
        lst = lst[:RECENT_CACHE_N]
    context.chat_data["recent_user_msgs"] = lst

def _recent_cache_get(context: ContextTypes.DEFAULT_TYPE):
    return context.chat_data.get("recent_user_msgs", [])

# ======== SMALL TALK DETECTION ========
_SMALLTALK_PATTERNS = {
    "ru": r"(–∫–∞–∫\s+–¥–µ–ª–∞( —É —Ç–µ–±—è)?|–∫–∞–∫\s+—Ç—ã|–∫–∞–∫\s+–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ|—á—Ç–æ\s+–¥–µ–ª–∞–µ—à—å|—á–µ–º\s+–∑–∞–Ω–∏–º–∞–µ—à—å—Å—è)",
    "en": r"(how\s+are\s+you|how'?s\s+it\s+going|what'?s\s+up)",
    "it": r"(come\s+stai|come\s+va|che\s+fai|che\s+si\s+dice)"
}
_SMALLTALK_REPLY = {
    "ru": "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å! –£ –º–µ–Ω—è –≤—Å—ë –æ–∫ ‚Äî —è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–¥–µ—Å—å —Ä–∞–¥–∏ —Ç–µ–±—è. –ß—Ç–æ —Å–µ–π—á–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞–Ω–∏–º–∞–µ—Ç —Ç–µ–±—è?",
    "en": "Thanks for asking! I‚Äôm doing well and fully here for you. What‚Äôs most on your mind right now?",
    "it": "Grazie per averlo chiesto! Sto bene e sono qui per te. Cosa ti pesa di pi√π in questo momento?"
}

def _is_smalltalk(text: str, lang: str) -> bool:
    if not isinstance(text, str):
        return False
    patt = _SMALLTALK_PATTERNS.get(lang, _SMALLTALK_PATTERNS["en"])
    return re.search(patt, text.lower()) is not None

def _smalltalk_reply(lang: str) -> str:
    return _SMALLTALK_REPLY.get(lang, _SMALLTALK_REPLY["en"])

# ======== ASYNC HANDLERS ========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_lang(context)
    await update.message.reply_text(LANGUAGES[lang]["greet"], reply_markup=menu_keyboard(context))

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = get_lang(context)
    user_id = str(query.from_user.id)
    chat_id = str(query.message.chat_id)

    try:
        if query.data == 'help':
            await query.message.reply_text(LANGUAGES[lang]["help"], reply_markup=menu_keyboard(context))
        elif query.data == 'abilities':
            await query.message.reply_text(LANGUAGES[lang]["abilities"], reply_markup=menu_keyboard(context))
        elif query.data == 'recent':
            # 1) —Å–Ω–∞—á–∞–ª–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
            cached = _recent_cache_get(context)
            if cached:
                joined = "\n‚Äî ".join(cached[:3])
                await query.message.reply_text(LANGUAGES[lang]["recent"] + joined, reply_markup=menu_keyboard(context))
            else:
                # 2) –µ—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç ‚Äî –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ USER-—Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Pinecone
                msgs = get_recent_user_messages(chat_id, limit=3)
                if msgs:
                    joined = "\n‚Äî ".join([m["content"] for m in msgs])
                    await query.message.reply_text(LANGUAGES[lang]["recent"] + joined, reply_markup=menu_keyboard(context))
                else:
                    # 3) –æ–±—â–∏–π fallback
                    any_msgs = get_recent_history(chat_id, limit=3)
                    if any_msgs:
                        joined = "\n‚Äî ".join([m["content"] for m in any_msgs])
                        await query.message.reply_text(LANGUAGES[lang]["recent"] + joined, reply_markup=menu_keyboard(context))
                    else:
                        await query.message.reply_text(LANGUAGES[lang]["recent_none"], reply_markup=menu_keyboard(context))
        elif query.data == 'clear':
            success = clear_memory(chat_id)
            context.chat_data["recent_user_msgs"] = []  # –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
            msg = LANGUAGES[lang]["cleared"] if success else LANGUAGES[lang]["nothing_clear"]
            await query.message.reply_text(msg, reply_markup=menu_keyboard(context))
        elif query.data == 'language':
            await query.message.reply_text(LANGUAGES[lang]["choose_language"], reply_markup=lang_choice_keyboard())
        elif query.data.startswith('setlang_'):
            new_lang = query.data[len('setlang_'):]
            if new_lang not in LANGUAGES:
                logger.error(f"No such language: {new_lang}")
                await query.message.reply_text("Selected language is not supported.", reply_markup=menu_keyboard(context))
                return
            set_lang(context, new_lang)
            lang = new_lang
            await query.message.reply_text(LANGUAGES[lang]["greet"], reply_markup=menu_keyboard(context))
    except Exception as e:
        logger.error(f"Button callback error: {e}", exc_info=True)
        await query.message.reply_text("Internal error. Please try again.", reply_markup=menu_keyboard(context))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_lang(context)  # —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–∫–Ω–æ–ø–∫–∏/—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç)
    user_id = str(update.message.from_user.id)
    chat_id = str(update.effective_chat.id)
    user_msg = update.message.text

    # —Ç–µ–∫—É—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã
    if not isinstance(user_msg, str) or len(user_msg) < 2 or len(user_msg) > 1500:
        await update.message.reply_text("Your message is too long or too short.", reply_markup=menu_keyboard(context))
        return

    # –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ò–ú–ï–ù–ù–û –≠–¢–û–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–∞–≤–∏–ª–∞/—Å—Ç–∏–ª—å –±—É–¥—É—Ç –æ—Ç –Ω–µ–≥–æ)
    msg_lang = _detect_msg_lang(user_msg, fallback=lang)

    # --- Small talk: –∫–æ—Ä–æ—Ç–∫–∏–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if _is_smalltalk(user_msg, msg_lang):
        reply = _smalltalk_reply(msg_lang)
        save_message(user_id, chat_id, user_msg, "user")
        _recent_cache_add(context, user_msg)
        save_message(user_id, chat_id, reply, "assistant")
        await update.message.reply_text(reply, reply_markup=menu_keyboard(context))
        return

    # persist user msg (+ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à)
    save_message(user_id, chat_id, user_msg, "user")
    _recent_cache_add(context, user_msg)

    # retrieve semantic history (chat-scoped)
    history = get_relevant_history(chat_id, user_msg, top_k=5)  # —á—É—Ç—å –º–µ–Ω—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    max_chars = 3000
    messages = [{"role": "system", "content": LANGUAGES[lang]["system_prompt"]}]
    total_len = 0
    for h in history:
        c = h.get("content", "")
        if total_len + len(c) < max_chars:
            messages.append({"role": h.get("role", "user"), "content": c})
            total_len += len(c)
    messages.append({"role": "user", "content": user_msg})

    try:
        # –¥–æ–±–∞–≤–∏–º –≤—Ç–æ—Ä—É—é system-–ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –Ø–ó–´–ö–£ –°–û–û–ë–©–ï–ù–ò–Ø –∏ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        final_messages = [
            {"role": "system", "content": LANGUAGES[lang]["system_prompt"]},                 # —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            {"role": "system", "content": STYLE_HINTS.get(msg_lang, STYLE_HINTS["en"])},     # —Å—Ç–∏–ª—å –æ—Ç —è–∑—ã–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            *messages[1:],  # –∏—Å—Ç–æ—Ä–∏—è + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        ]
        resp = oa.chat.completions.create(
            model=MODEL_NAME,
            messages=final_messages,
            temperature=0.6,
            max_tokens=220,
            frequency_penalty=0.6,
            presence_penalty=0.2
        )
        reply = resp.choices[0].message.content.strip()
        reply = _shrink_reply(reply, max_sentences=REPLY_MAX_SENTENCES, max_words=REPLY_MAX_WORDS)
    except Exception as e:
        logger.error(f"OpenAI error: {e}", exc_info=True)
        reply = LANGUAGES[lang].get("error", "Sorry, a technical error occurred.")

    # persist bot reply
    save_message(user_id, chat_id, reply, "assistant")
    await update.message.reply_text(reply, reply_markup=menu_keyboard(context))

async def error_handler(update, context):
    logger.error(msg="Exception while handling update:", exc_info=context.error)
    try:
        if update and getattr(update, "message", None):
            await update.message.reply_text("Sorry, an error occurred.", reply_markup=menu_keyboard(context))
    except Exception:
        pass

# ======== MAIN ========
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)
    logger.info("Bot is running!")
    app.run_polling()

if __name__ == "__main__":
    main()
